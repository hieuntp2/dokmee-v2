@model Web.Models.ConfigModel

@{
    ViewBag.Title = "Installation";
}

@Html.Partial("~/Views/Home/_loadingOverlay.cshtml")

<section style="top: 10vh;">
    <div class="col-md-8 col-md-offset-2">
        <h2 style="text-align: center;">@ViewBag.Title</h2>
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "config-form" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.SQLServerName, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SQLServerName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SQLServerName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DbUsername, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DbUsername, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DbUsername, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DbPassword, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DbPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DbPassword, "", new { @class = "text-danger" })
                    </div>
                </div>




                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.TempFolder, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.TempFolder, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TempFolder, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.DokmeeCloudUrl, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DokmeeCloudUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DokmeeCloudUrl, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DokmeeDmsHostUrl, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DokmeeDmsHostUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DokmeeDmsHostUrl, "", new { @class = "text-danger" })
                    </div>
                </div>

                <hr />
                <h4 style="text-align:center;">Document Status Configuration</h4>
                <div class="form-group">
                    @Html.LabelFor(model => model.DocumentStatusIndex, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DocumentStatusIndex, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DocumentStatusIndex, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DocumentStatusIndexValue, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.DocumentStatusIndexValue, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DocumentStatusIndexValue, "", new { @class = "text-danger" })
                        <small>
                            List of Document Status values, separated by comma
                        </small>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12" style="text-align:center;">
                        @if (!string.IsNullOrWhiteSpace(Model.UpdateMessage))
                        {
                            if (Model.IsSuccess)
                            {
                                <p style="color:blue;">@Model.UpdateMessage</p>
                                <p>@Html.ActionLink("Click here to return Login page", "Login", "Account")</p>
                            }
                            else
                            {
                                <p style="color:red;">@Model.UpdateMessage</p>

                            }
                        }
                        <input type="submit" value="Save" class="btn btn-primary" id="submit-button" />
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $("#config-form").submit(function (event) {
            if (confirm("Are you sure to update setting?")) {
                $("#loading-overlay").show();
                $("#submit-button").attr("disabled", "disabled");
                return true;
            }
            return false;
        });
    </script>
}
